__start:
__text_start:
    002C E5CF      LDI	R28,0x5F
    002D E0D4      LDI	R29,4
    002E BFCD      OUT	0x3D,R28
    002F BFDE      OUT	0x3E,R29
    0030 51C0      SUBI	R28,0x10
    0031 40D0      SBCI	R29,0
    0032 EA0A      LDI	R16,0xAA
    0033 8308      STD	Y+0,R16
    0034 2400      CLR	R0
    0035 E6E4      LDI	R30,0x64
    0036 E0F0      LDI	R31,0
    0037 E010      LDI	R17,0
    0038 36E4      CPI	R30,0x64
    0039 07F1      CPC	R31,R17
    003A F011      BEQ	0x003D
    003B 9201      ST	R0,Z+
    003C CFFB      RJMP	0x0038
    003D 8300      STD	Z+0,R16
    003E E5E4      LDI	R30,0x54
    003F E0F0      LDI	R31,0
    0040 E6A0      LDI	R26,0x60
    0041 E0B0      LDI	R27,0
    0042 E010      LDI	R17,0
    0043 35E8      CPI	R30,0x58
    0044 07F1      CPC	R31,R17
    0045 F021      BEQ	0x004A
    0046 95C8      LPM
    0047 9631      ADIW	R30,1
    0048 920D      ST	R0,X+
    0049 CFF9      RJMP	0x0043
    004A 940E0085  CALL	_main
_exit:
    004C CFFF      RJMP	_exit
FILE: E:\新建文件夹\avr资料\例程\m16\步进驱动\main.c
(0001) //ICC-AVR application builder : 2007-10-19 14:27:15
(0002) // Target : M16
(0003) // Crystal: 1.0000Mhz
(0004) 
(0005) //PA0~PA6：CKA,ENA,CWA,CKB,ENB,CWB
(0006) 
(0007) #include <iom16v.h>
(0008) #include <macros.h>
(0009) 
(0010) #define CKA (1<<0)
(0011) #define ENA (1<<1)
(0012) #define CWA (1<<2)
(0013) #define CKB (1<<3)
(0014) #define ENB (1<<4)
(0015) #define CWB (1<<5)
(0016) 
(0017) 
(0018) unsigned int data = 0;
(0019) unsigned char choose = 0,key = 0;
(0020) void port_init(void)
(0021) {
(0022)  PORTA = 0x00;
_port_init:
    004D 2422      CLR	R2
    004E BA2B      OUT	0x1B,R2
(0023)  DDRA  = 0xFF;
    004F EF8F      LDI	R24,0xFF
    0050 BB8A      OUT	0x1A,R24
(0024)  PORTB = 0x00;
    0051 BA28      OUT	0x18,R2
(0025)  DDRB  = 0x00;
    0052 BA27      OUT	0x17,R2
(0026)  PORTC = 0x00; //m103 output only
    0053 BA25      OUT	0x15,R2
(0027)  DDRC  = 0x00;
    0054 BA24      OUT	0x14,R2
(0028)  PORTD = 0x00;
    0055 BA22      OUT	0x12,R2
(0029)  DDRD  = 0x00;
    0056 BA21      OUT	0x11,R2
    0057 9508      RET
(0030) }
(0031) 
(0032) //TIMER0 initialize - prescale:1024
(0033) // WGM: Normal
(0034) // desired value: 200mSec
(0035) // actual value: 199.680mSec (0.2%)
(0036) void timer0_init(void)
(0037) {
(0038)  TCCR0 = 0x00; //stop
_timer0_init:
    0058 2422      CLR	R2
    0059 BE23      OUT	0x33,R2
(0039)  TCNT0 = 0x3D; //set count
    005A E38D      LDI	R24,0x3D
    005B BF82      OUT	0x32,R24
(0040)  OCR0  = 0xC3;  //set compare
    005C EC83      LDI	R24,0xC3
    005D BF8C      OUT	0x3C,R24
(0041)  TCCR0 = 0x05; //start timer
    005E E085      LDI	R24,5
    005F BF83      OUT	0x33,R24
    0060 9508      RET
_timer0_ovf_isr:
    0061 922A      ST	R2,-Y
    0062 938A      ST	R24,-Y
    0063 B62F      IN	R2,0x3F
    0064 922A      ST	R2,-Y
(0042) }
(0043) 
(0044) #pragma interrupt_handler timer0_ovf_isr:10
(0045) void timer0_ovf_isr(void)
(0046) {
(0047)  TCNT0 = 0x3D; //reload counter value
    0065 E38D      LDI	R24,0x3D
    0066 BF82      OUT	0x32,R24
(0048)  
(0049)  /*if(choose == 0)
(0050)   {data++;
(0051)    if(data == 1000)
(0052)     {choose = 1;
(0053) 	 data = 0;
(0054)     }
(0055)    	PORTA |= CWA;
(0056) 	PORTA &= ~CWB;
(0057)   }
(0058)  else
(0059)   {data++;
(0060)    if(data == 1000)
(0061)     {choose = 0;
(0062) 	 data = 0;
(0063) 	}
(0064) 	PORTA |= CWB;
(0065) 	PORTA &= ~CWA;
(0066)   } */
(0067)   if(key == 0)
    0067 90200063  LDS	R2,key
    0069 2022      TST	R2
    006A F431      BNE	0x0071
(0068)    {key = 1;
    006B E081      LDI	R24,1
    006C 93800063  STS	key,R24
(0069)     PORTA |= CKA;
    006E 9AD8      SBI	0x1B,0
(0070) 	PORTA |= CKB;
    006F 9ADB      SBI	0x1B,3
(0071)    }
    0070 C005      RJMP	0x0076
(0072)    else
(0073)    {key = 0;
    0071 2422      CLR	R2
    0072 92200063  STS	key,R2
(0074)     PORTA &= ~CKA;
    0074 98D8      CBI	0x1B,0
(0075) 	PORTA &= ~CKB;
    0075 98DB      CBI	0x1B,3
(0076)    }
    0076 9029      LD	R2,Y+
    0077 BE2F      OUT	0x3F,R2
    0078 9189      LD	R24,Y+
    0079 9029      LD	R2,Y+
    007A 9518      RETI
(0077) }
(0078) 
(0079) //call this routine to initialize all peripherals
(0080) void init_devices(void)
(0081) {
(0082)  //stop errant interrupts until set up
(0083)  CLI(); //disable all interrupts
_init_devices:
    007B 94F8      BCLR	7
(0084)  port_init();
    007C DFD0      RCALL	_port_init
(0085)  timer0_init();
    007D DFDA      RCALL	_timer0_init
(0086) 
(0087)  MCUCR = 0x00;
    007E 2422      CLR	R2
    007F BE25      OUT	0x35,R2
(0088)  GICR  = 0x00;
    0080 BE2B      OUT	0x3B,R2
(0089)  TIMSK = 0x01; //timer interrupt sources
    0081 E081      LDI	R24,1
    0082 BF89      OUT	0x39,R24
(0090)  SEI(); //re-enable interrupts
    0083 9478      BSET	7
    0084 9508      RET
(0091)  //all peripherals are now initialized
(0092) }
(0093) 
(0094) //
(0095) void main(void)
(0096) {
(0097)  init_devices();
_main:
    0085 DFF5      RCALL	_init_devices
(0098)  PORTA &= ~ENA;
    0086 98D9      CBI	0x1B,1
(0099)  PORTB &= ~ENB;
FILE: <library>
    0087 98C4      CBI	0x18,4
    0088 9508      RET
