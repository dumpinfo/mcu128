__start:
__text_start:
    004F EFCF      LDI	R28,0xFF
    0050 E1D0      LDI	R29,0x10
    0051 BFCD      OUT	0x3D,R28
    0052 BFDE      OUT	0x3E,R29
    0053 51C0      SUBI	R28,0x10
    0054 40D0      SBCI	R29,0
    0055 EA0A      LDI	R16,0xAA
    0056 8308      STD	Y+0,R16
    0057 2400      CLR	R0
    0058 E1E2      LDI	R30,0x12
    0059 E0F1      LDI	R31,1
    005A E011      LDI	R17,1
    005B 31E2      CPI	R30,0x12
    005C 07F1      CPC	R31,R17
    005D F011      BEQ	0x0060
    005E 9201      ST	R0,Z+
    005F CFFB      RJMP	0x005B
    0060 8300      STD	Z+0,R16
    0061 E8EC      LDI	R30,0x8C
    0062 E0F0      LDI	R31,0
    0063 E0A0      LDI	R26,0
    0064 E0B1      LDI	R27,1
    0065 E010      LDI	R17,0
    0066 39EE      CPI	R30,0x9E
    0067 07F1      CPC	R31,R17
    0068 F021      BEQ	0x006D
    0069 95C8      LPM
    006A 9631      ADIW	R30,1
    006B 920D      ST	R0,X+
    006C CFF9      RJMP	0x0066
    006D 940E00DA  CALL	_main
_exit:
    006F CFFF      RJMP	_exit
FILE: F:\mega128包\mega128例程\数码管\main.c
(0001) //ICC-AVR application builder : 2007-6-11 20:45:01
(0002) // Target : M16
(0003) // Crystal: 4.0000Mhz
(0004) //使用了PD口和PC口，其中Pd口作为数据口，PC口作为地址口。
(0005) //该程序使用了定时器T0，采用循环扫描方式显示8位数据
(0006) 
(0007) 
(0008) //ICC-AVR application builder : 2007-6-26 15:48:39
(0009) // Target : M128
(0010) // Crystal: 6.0000Mhz
(0011) 
(0012) #include <iom128v.h>
(0013) #include <macros.h>
(0014) //#include "seg7.h"
(0015) unsigned char seg7[]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90};
(0016) unsigned char addr=1,ldata = 0,jdata = 0,i=0;//定义几个变量
(0017) 
(0018) unsigned char kdata[] = {5,6,7,8};//需要显示的数据
(0019) void port_init(void)
(0020) {
(0021)  PORTA = 0xFF;
_port_init:
    0070 EF8F      LDI	R24,0xFF
    0071 BB8B      OUT	0x1B,R24
(0022)  DDRA  = 0xFF;
    0072 BB8A      OUT	0x1A,R24
(0023)  PORTB = 0xFF;
    0073 BB88      OUT	0x18,R24
(0024)  DDRB  = 0xFF;
    0074 BB87      OUT	0x17,R24
(0025)  PORTC = 0xFF; //m103 output only
    0075 BB85      OUT	0x15,R24
(0026)  DDRC  = 0xFF;
    0076 BB84      OUT	0x14,R24
(0027)  PORTD = 0xFF;
    0077 BB82      OUT	0x12,R24
(0028)  DDRD  = 0xFF;
    0078 BB81      OUT	0x11,R24
(0029)  PORTE = 0x0; 
    0079 2422      CLR	R2
    007A B823      OUT	0x03,R2
(0030)  DDRE  = 0xFF;
    007B B982      OUT	0x02,R24
(0031)  PORTF = 0xFF;
    007C 93800062  STS	0x62,R24
(0032)  DDRF  = 0xFF;
    007E 93800061  STS	0x61,R24
(0033)  PORTG = 0x0;
    0080 92200065  STS	0x65,R2
(0034)  DDRG  = 0xFF;
    0082 93800064  STS	0x64,R24
    0084 9508      RET
(0035) }
(0036) 
(0037) //TIMER0 initialisation - prescale:8
(0038) // WGM: Normal
(0039) // desired value: 10KHz
(0040) // actual value: 10.000KHz (0.0%)
(0041) void timer0_init(void)
(0042) {
(0043)  TCCR0 = 0x00; //stop
_timer0_init:
    0085 2422      CLR	R2
    0086 BE23      OUT	0x33,R2
(0044)  ASSR  = 0x00; //set async mode
    0087 BE20      OUT	0x30,R2
(0045)  TCNT0 = 0xB5; //set count
    0088 EB85      LDI	R24,0xB5
    0089 BF82      OUT	0x32,R24
(0046)  OCR0  = 0x4B;
    008A E48B      LDI	R24,0x4B
    008B BF81      OUT	0x31,R24
(0047)  TCCR0 = 0x02; //start timer
    008C E082      LDI	R24,2
    008D BF83      OUT	0x33,R24
    008E 9508      RET
_timer0_ovf_isr:
    008F 922A      ST	R2,-Y
    0090 938A      ST	R24,-Y
    0091 939A      ST	R25,-Y
    0092 93EA      ST	R30,-Y
    0093 93FA      ST	R31,-Y
    0094 B62F      IN	R2,0x3F
    0095 922A      ST	R2,-Y
(0048) }
(0049) 
(0050) #pragma interrupt_handler timer0_ovf_isr:17
(0051) void timer0_ovf_isr(void)
(0052) {
(0053)  TCNT0 = 0xB5; //reload counter value
    0096 EB85      LDI	R24,0xB5
    0097 BF82      OUT	0x32,R24
(0054)  
(0055)  PORTC = addr; //地址送如PC口
    0098 9020010A  LDS	R2,addr
    009A BA25      OUT	0x15,R2
(0056)  jdata = kdata[i];//取出需要显示的数据
    009B E08E      LDI	R24,0xE
    009C E091      LDI	R25,1
    009D 91E0010D  LDS	R30,i
    009F 27FF      CLR	R31
    00A0 0FE8      ADD	R30,R24
    00A1 1FF9      ADC	R31,R25
    00A2 8020      LDD	R2,Z+0
    00A3 9220010C  STS	jdata,R2
(0057)  
(0058)  
(0059)  //数据译码成7段SEG数据
(0060)  PORTD = seg7[jdata];//数据送如PD口
    00A5 E080      LDI	R24,0
    00A6 E091      LDI	R25,1
    00A7 2DE2      MOV	R30,R2
    00A8 27FF      CLR	R31
    00A9 0FE8      ADD	R30,R24
    00AA 1FF9      ADC	R31,R25
    00AB 8020      LDD	R2,Z+0
    00AC BA22      OUT	0x12,R2
(0061)  
(0062)  i++;         //取数地址加1
    00AD 9180010D  LDS	R24,i
    00AF 5F8F      SUBI	R24,0xFF
    00B0 9380010D  STS	i,R24
(0063)  addr = addr<<1;//显示地址左移
    00B2 9020010A  LDS	R2,addr
    00B4 0C22      LSL	R2
    00B5 9220010A  STS	addr,R2
(0064)  if(i == 4)//如果显示完8位后，返回到第一位
    00B7 3084      CPI	R24,4
    00B8 F431      BNE	0x00BF
(0065)   {addr = 1;
    00B9 E081      LDI	R24,1
    00BA 9380010A  STS	addr,R24
(0066)    i = 0;
    00BC 2422      CLR	R2
    00BD 9220010D  STS	i,R2
(0067)   }
    00BF 9029      LD	R2,Y+
    00C0 BE2F      OUT	0x3F,R2
    00C1 91F9      LD	R31,Y+
    00C2 91E9      LD	R30,Y+
    00C3 9199      LD	R25,Y+
    00C4 9189      LD	R24,Y+
    00C5 9029      LD	R2,Y+
    00C6 9518      RETI
(0068)   
(0069)  
(0070) }
(0071) 
(0072) //call this routine to initialise all peripherals
(0073) void init_devices(void)
(0074) {
(0075)  //stop errant interrupts until set up
(0076)  CLI(); //disable all interrupts
_init_devices:
    00C7 94F8      BCLR	7
(0077)  XDIV  = 0x00; //xtal divider
    00C8 2422      CLR	R2
    00C9 BE2C      OUT	0x3C,R2
(0078)  XMCRA = 0x00; //external memory
    00CA 9220006D  STS	0x6D,R2
(0079)  port_init();
    00CC DFA3      RCALL	_port_init
(0080)  timer0_init();
    00CD DFB7      RCALL	_timer0_init
(0081) 
(0082)  MCUCR = 0x00;
    00CE 2422      CLR	R2
    00CF BE25      OUT	0x35,R2
(0083)  EICRA = 0x00; //extended ext ints
    00D0 9220006A  STS	0x6A,R2
(0084)  EICRB = 0x00; //extended ext ints
    00D2 BE2A      OUT	0x3A,R2
(0085)  EIMSK = 0x00;
    00D3 BE29      OUT	0x39,R2
(0086)  TIMSK = 0x01; //timer interrupt sources
    00D4 E081      LDI	R24,1
    00D5 BF87      OUT	0x37,R24
(0087)  ETIMSK = 0x00; //extended timer interrupt sources
    00D6 9220007D  STS	0x7D,R2
(0088)  SEI(); //re-enable interrupts
    00D8 9478      BSET	7
    00D9 9508      RET
(0089)  //all peripherals are now initialised
(0090) }
(0091) 
(0092) //
(0093) void main(void)
(0094) {
(0095)  init_devices();
FILE: <library>
_main:
    00DA DFEC      RCALL	_init_devices
    00DB 9508      RET
