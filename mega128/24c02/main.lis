                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile C:\DOCUME~1\solo\MYDOCU~1\1281\main.c
 0000                   .dbfunc e i2c_Write _i2c_Write fc
 0000           ;              i -> R20
 0000           ;     RomAddress -> R18
 0000           ;          Wdata -> R16
                        .even
 0000           _i2c_Write::
 0000 0E940000          xcall push_gset1
 0004                   .dbline -1
 0004                   .dbline 14
 0004           ; //****************************************************************************** 
 0004           ; //源文件 
 0004           ; //****************************************************************************** 
 0004           ; #include <iom128v.h> 
 0004           ; #include <macros.h> 
 0004           ; #include"TWI.H" 
 0004           ; #define rd_device_add 0xA1 
 0004           ; #define wr_device_add 0xA0  
 0004           ;   
 0004           ; unsigned char  data1,data2,data3,data4;
 0004           ; 
 0004           ; 
 0004           ; unsigned char i2c_Write(unsigned char Wdata,unsigned char RomAddress)  
 0004           ; { 
 0004                   .dbline 16
 0004           ;      unsigned char i; 
 0004           ;           Start();//I2C启动 
 0004 84EA              ldi R24,164
 0006 80937400          sts 116,R24
 000A                   .dbline 17
 000A           L2:
 000A                   .dbline 17
 000A           L3:
 000A                   .dbline 17
 000A           ;           Wait(); 
 000A 20907400          lds R2,116
 000E 27FE              sbrs R2,7
 0010 FCCF              rjmp L2
 0012                   .dbline 17
 0012                   .dbline 17
 0012                   .dbline 18
 0012           ;           if(TestAck()!=START) return 1;//ACK 
 0012 80917100          lds R24,113
 0016 887F              andi R24,248
 0018 8830              cpi R24,8
 001A 11F0              breq L5
 001C                   .dbline 18
 001C 01E0              ldi R16,1
 001E 3AC0              xjmp L1
 0020           L5:
 0020                   .dbline 20
 0020           ;                 
 0020           ;           Write8Bit(wr_device_add);//写I2C从器件地址和写方式 
 0020                   .dbline 20
 0020 80EA              ldi R24,160
 0022 80937300          sts 115,R24
 0026                   .dbline 20
 0026 84E8              ldi R24,132
 0028 80937400          sts 116,R24
 002C                   .dbline 20
 002C                   .dbline 20
 002C                   .dbline 21
 002C           L7:
 002C                   .dbline 21
 002C           L8:
 002C                   .dbline 21
 002C           ;           Wait(); 
 002C 20907400          lds R2,116
 0030 27FE              sbrs R2,7
 0032 FCCF              rjmp L7
 0034                   .dbline 21
 0034                   .dbline 21
 0034                   .dbline 22
 0034           ;           if(TestAck()!=MT_SLA_ACK) return 1;//ACK 
 0034 80917100          lds R24,113
 0038 887F              andi R24,248
 003A 8831              cpi R24,24
 003C 11F0              breq L10
 003E                   .dbline 22
 003E 01E0              ldi R16,1
 0040 29C0              xjmp L1
 0042           L10:
 0042                   .dbline 24
 0042           ;                 
 0042           ;           Write8Bit(RomAddress);//写24C02的ROM地址 
 0042                   .dbline 24
 0042 20937300          sts 115,R18
 0046                   .dbline 24
 0046 84E8              ldi R24,132
 0048 80937400          sts 116,R24
 004C                   .dbline 24
 004C                   .dbline 24
 004C                   .dbline 25
 004C           L12:
 004C                   .dbline 25
 004C           L13:
 004C                   .dbline 25
 004C           ;           Wait(); 
 004C 20907400          lds R2,116
 0050 27FE              sbrs R2,7
 0052 FCCF              rjmp L12
 0054                   .dbline 25
 0054                   .dbline 25
 0054                   .dbline 26
 0054           ;           if(TestAck()!=MT_DATA_ACK) return 1;//ACK 
 0054 80917100          lds R24,113
 0058 887F              andi R24,248
 005A 8832              cpi R24,40
 005C 11F0              breq L15
 005E                   .dbline 26
 005E 01E0              ldi R16,1
 0060 19C0              xjmp L1
 0062           L15:
 0062                   .dbline 28
 0062           ;                 
 0062           ;           Write8Bit(Wdata);//写数据到24C02的ROM 
 0062                   .dbline 28
 0062 00937300          sts 115,R16
 0066                   .dbline 28
 0066 84E8              ldi R24,132
 0068 80937400          sts 116,R24
 006C                   .dbline 28
 006C                   .dbline 28
 006C                   .dbline 29
 006C           L17:
 006C                   .dbline 29
 006C           L18:
 006C                   .dbline 29
 006C           ;           Wait(); 
 006C 20907400          lds R2,116
 0070 27FE              sbrs R2,7
 0072 FCCF              rjmp L17
 0074                   .dbline 29
 0074                   .dbline 29
 0074                   .dbline 30
 0074           ;           if(TestAck()!=MT_DATA_ACK) return 1;//ACK
 0074 80917100          lds R24,113
 0078 887F              andi R24,248
 007A 8832              cpi R24,40
 007C 11F0              breq L20
 007E                   .dbline 30
 007E 01E0              ldi R16,1
 0080 09C0              xjmp L1
 0082           L20:
 0082                   .dbline 32
 0082           ;                          
 0082           ;           Stop();//I2C停止 
 0082 84E9              ldi R24,148
 0084 80937400          sts 116,R24
 0088                   .dbline 33
 0088 4427              clr R20
 008A 01C0              xjmp L25
 008C           L22:
 008C                   .dbline 33
 008C           L23:
 008C                   .dbline 33
 008C 4395              inc R20
 008E           L25:
 008E                   .dbline 33
 008E           ;             for(i=0;i<250;i++); 
 008E 4A3F              cpi R20,250
 0090 E8F3              brlo L22
 0092                   .dbline 34
 0092           ;           return 0; 
 0092 0027              clr R16
 0094                   .dbline -2
 0094           L1:
 0094 0E940000          xcall pop_gset1
 0098                   .dbline 0 ; func end
 0098 0895              ret
 009A                   .dbsym r i 20 c
 009A                   .dbsym r RomAddress 18 c
 009A                   .dbsym r Wdata 16 c
 009A                   .dbend
 009A                   .dbfunc e i2c_Read _i2c_Read fc
 009A           ;           temp -> R20
 009A           ;     RomAddress -> R16
                        .even
 009A           _i2c_Read::
 009A 0E940000          xcall push_gset1
 009E                   .dbline -1
 009E                   .dbline 41
 009E           ; } 
 009E           ; /****************************************** 
 009E           ;                I2C总线读一个字节 
 009E           ;                            如果读失败也返回0 
 009E           ; *******************************************/ 
 009E           ; unsigned char i2c_Read(unsigned char RomAddress)  
 009E           ;       { 
 009E                   .dbline 43
 009E           ;            unsigned char temp; 
 009E           ;            Start();//I2C启动 
 009E 84EA              ldi R24,164
 00A0 80937400          sts 116,R24
 00A4                   .dbline 44
 00A4           L27:
 00A4                   .dbline 44
 00A4           L28:
 00A4                   .dbline 44
 00A4           ;            Wait(); 
 00A4 20907400          lds R2,116
 00A8 27FE              sbrs R2,7
 00AA FCCF              rjmp L27
 00AC                   .dbline 44
 00AC                   .dbline 44
 00AC                   .dbline 45
 00AC           ;            if (TestAck()!=START) return 0;//ACK  
 00AC 80917100          lds R24,113
 00B0 887F              andi R24,248
 00B2 8830              cpi R24,8
 00B4 11F0              breq L30
 00B6                   .dbline 45
 00B6 0027              clr R16
 00B8 54C0              xjmp L26
 00BA           L30:
 00BA                   .dbline 47
 00BA           ;                           
 00BA           ;            Write8Bit(wr_device_add);//写I2C从器件地址和写方式 
 00BA                   .dbline 47
 00BA 80EA              ldi R24,160
 00BC 80937300          sts 115,R24
 00C0                   .dbline 47
 00C0 84E8              ldi R24,132
 00C2 80937400          sts 116,R24
 00C6                   .dbline 47
 00C6                   .dbline 47
 00C6                   .dbline 48
 00C6           L32:
 00C6                   .dbline 48
 00C6           L33:
 00C6                   .dbline 48
 00C6           ;            Wait();  
 00C6 20907400          lds R2,116
 00CA 27FE              sbrs R2,7
 00CC FCCF              rjmp L32
 00CE                   .dbline 48
 00CE                   .dbline 48
 00CE                   .dbline 49
 00CE           ;            if (TestAck()!=MT_SLA_ACK) return 0;//ACK //
 00CE 80917100          lds R24,113
 00D2 887F              andi R24,248
 00D4 8831              cpi R24,24
 00D6 11F0              breq L35
 00D8                   .dbline 49
 00D8 0027              clr R16
 00DA 43C0              xjmp L26
 00DC           L35:
 00DC                   .dbline 51
 00DC           ;                  // 
 00DC           ;            Write8Bit(RomAddress);//写24C02的ROM地址 
 00DC                   .dbline 51
 00DC 00937300          sts 115,R16
 00E0                   .dbline 51
 00E0 84E8              ldi R24,132
 00E2 80937400          sts 116,R24
 00E6                   .dbline 51
 00E6                   .dbline 51
 00E6                   .dbline 52
 00E6           L37:
 00E6                   .dbline 52
 00E6           L38:
 00E6                   .dbline 52
 00E6           ;            Wait(); 
 00E6 20907400          lds R2,116
 00EA 27FE              sbrs R2,7
 00EC FCCF              rjmp L37
 00EE                   .dbline 52
 00EE                   .dbline 52
 00EE                   .dbline 53
 00EE           ;            if (TestAck()!=MT_DATA_ACK) return 0; //?
 00EE 80917100          lds R24,113
 00F2 887F              andi R24,248
 00F4 8832              cpi R24,40
 00F6 11F0              breq L40
 00F8                   .dbline 53
 00F8 0027              clr R16
 00FA 33C0              xjmp L26
 00FC           L40:
 00FC                   .dbline 55
 00FC           ;                 //data1=TestAck();
 00FC           ;            Start();//I2C重新启动 
 00FC 84EA              ldi R24,164
 00FE 80937400          sts 116,R24
 0102                   .dbline 56
 0102           L42:
 0102                   .dbline 56
 0102           L43:
 0102                   .dbline 56
 0102           ;            Wait(); 
 0102 20907400          lds R2,116
 0106 27FE              sbrs R2,7
 0108 FCCF              rjmp L42
 010A                   .dbline 56
 010A                   .dbline 56
 010A                   .dbline 57
 010A           ;            if (TestAck()!=RE_START)  return 0; 
 010A 80917100          lds R24,113
 010E 887F              andi R24,248
 0110 8031              cpi R24,16
 0112 11F0              breq L45
 0114                   .dbline 57
 0114 0027              clr R16
 0116 25C0              xjmp L26
 0118           L45:
 0118                   .dbline 59
 0118           ;                  
 0118           ;            Write8Bit(rd_device_add);//写I2C从器件地址和读方式 
 0118                   .dbline 59
 0118 81EA              ldi R24,161
 011A 80937300          sts 115,R24
 011E                   .dbline 59
 011E 84E8              ldi R24,132
 0120 80937400          sts 116,R24
 0124                   .dbline 59
 0124                   .dbline 59
 0124                   .dbline 60
 0124           L47:
 0124                   .dbline 60
 0124           L48:
 0124                   .dbline 60
 0124           ;            Wait(); 
 0124 20907400          lds R2,116
 0128 27FE              sbrs R2,7
 012A FCCF              rjmp L47
 012C                   .dbline 60
 012C                   .dbline 60
 012C                   .dbline 61
 012C           ;            if(TestAck()!=MR_SLA_ACK)  return 0;//ACK 
 012C 80917100          lds R24,113
 0130 887F              andi R24,248
 0132 8034              cpi R24,64
 0134 11F0              breq L50
 0136                   .dbline 61
 0136 0027              clr R16
 0138 14C0              xjmp L26
 013A           L50:
 013A                   .dbline 63
 013A           ;                   
 013A           ;            Twi();//启动主I2C读方式 
 013A 84E8              ldi R24,132
 013C 80937400          sts 116,R24
 0140                   .dbline 64
 0140           L52:
 0140                   .dbline 64
 0140           L53:
 0140                   .dbline 64
 0140           ;            Wait(); 
 0140 20907400          lds R2,116
 0144 27FE              sbrs R2,7
 0146 FCCF              rjmp L52
 0148                   .dbline 64
 0148                   .dbline 64
 0148                   .dbline 65
 0148           ;            if(TestAck()!=MR_DATA_NOACK) return 0;//ACK         
 0148 80917100          lds R24,113
 014C 887F              andi R24,248
 014E 8835              cpi R24,88
 0150 11F0              breq L55
 0152                   .dbline 65
 0152 0027              clr R16
 0154 06C0              xjmp L26
 0156           L55:
 0156                   .dbline 66
 0156           ;            temp=TWDR;//读取I2C接收数据 
 0156 40917300          lds R20,115
 015A                   .dbline 67
 015A           ;        Stop();//I2C停止 
 015A 84E9              ldi R24,148
 015C 80937400          sts 116,R24
 0160                   .dbline 68
 0160           ;            return temp; 
 0160 042F              mov R16,R20
 0162                   .dbline -2
 0162           L26:
 0162 0E940000          xcall pop_gset1
 0166                   .dbline 0 ; func end
 0166 0895              ret
 0168                   .dbsym r temp 20 c
 0168                   .dbsym r RomAddress 16 c
 0168                   .dbend
 0168                   .dbfunc e i2cini _i2cini fV
                        .even
 0168           _i2cini::
 0168                   .dbline -1
 0168                   .dbline 73
 0168           ;       } 
 0168           ; 
 0168           ; 
 0168           ;      void i2cini(void) 
 0168           ;          { 
 0168                   .dbline 74
 0168           ;          TWBR=163; 
 0168 83EA              ldi R24,163
 016A 80937000          sts 112,R24
 016E                   .dbline 75
 016E           ;       TWSR=00; 
 016E 2224              clr R2
 0170 20927100          sts 113,R2
 0174                   .dbline -2
 0174                   .dbline 76
 0174           ;          } 
 0174           L57:
 0174                   .dbline 0 ; func end
 0174 0895              ret
 0176                   .dbend
 0176                   .dbfunc e main _main fV
 0176           ;              c -> R22
 0176           ;              i -> R10
 0176           ;              b -> R20
 0176           ;              j -> R22
 0176           ;              k -> R10
                        .even
 0176           _main::
 0176                   .dbline -1
 0176                   .dbline 81
 0176           ; 
 0176           ; 
 0176           ;           
 0176           ; void main(void) 
 0176           ; {     
 0176                   .dbline 82
 0176           ;      unsigned char i=0Xff,b = 0x0,c = 0x22,j,k; 
 0176 8FEF              ldi R24,255
 0178 A82E              mov R10,R24
 017A                   .dbline 82
 017A 4427              clr R20
 017C                   .dbline 82
 017C 62E2              ldi R22,34
 017E                   .dbline 84
 017E           ;          
 017E           ;          DDRC=0xff; 
 017E A4BA              out 0x14,R10
 0180                   .dbline 85
 0180           ;                DDRE=0xff;
 0180 A2B8              out 0x2,R10
 0182                   .dbline 86
 0182           ;          DDRD=0xff; 
 0182 A1BA              out 0x11,R10
 0184                   .dbline 87
 0184           ;          PORTD=0; 
 0184 2224              clr R2
 0186 22BA              out 0x12,R2
 0188                   .dbline 88
 0188           ;      i2cini(); 
 0188 EFDF              xcall _i2cini
 018A                   .dbline 91
 018A           ;         // while(1)
 018A           ;               // {         
 018A           ;         c = i2c_Write(i,0x03); 
 018A 23E0              ldi R18,3
 018C 0A2D              mov R16,R10
 018E 38DF              xcall _i2c_Write
 0190                   .dbline 92
 0190           ;               for(j=0;j<100;j++)
 0190 6627              clr R22
 0192 07C0              xjmp L62
 0194           L59:
 0194                   .dbline 93
 0194 AA24              clr R10
 0196 01C0              xjmp L66
 0198           L63:
 0198                   .dbline 93
 0198           L64:
 0198                   .dbline 93
 0198 A394              inc R10
 019A           L66:
 019A                   .dbline 93
 019A 8A2D              mov R24,R10
 019C 8436              cpi R24,100
 019E E0F3              brlo L63
 01A0           L60:
 01A0                   .dbline 92
 01A0 6395              inc R22
 01A2           L62:
 01A2                   .dbline 92
 01A2 6436              cpi R22,100
 01A4 B8F3              brlo L59
 01A6                   .dbline 95
 01A6           ;               for(k=0;k<100;k++);
 01A6           ;                
 01A6           ;               b = i2c_Read(0x03); 
 01A6 03E0              ldi R16,3
 01A8 78DF              xcall _i2c_Read
 01AA 402F              mov R20,R16
 01AC                   .dbline 96
 01AC           ;               PORTE = data1;
 01AC 20900300          lds R2,_data1
 01B0 23B8              out 0x3,R2
 01B2                   .dbline 97
 01B2           ;               PORTC = b;
 01B2 05BB              out 0x15,R16
 01B4                   .dbline -2
 01B4                   .dbline 99
 01B4           ;        //  }   
 01B4           ; } 
 01B4           L58:
 01B4                   .dbline 0 ; func end
 01B4 0895              ret
 01B6                   .dbsym r c 22 c
 01B6                   .dbsym r i 10 c
 01B6                   .dbsym r b 20 c
 01B6                   .dbsym r j 22 c
 01B6                   .dbsym r k 10 c
 01B6                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile C:\DOCUME~1\solo\MYDOCU~1\1281\main.c
 0000           _data4::
 0000                   .blkb 1
 0001                   .dbsym e data4 _data4 c
 0001           _data3::
 0001                   .blkb 1
 0002                   .dbsym e data3 _data3 c
 0002           _data2::
 0002                   .blkb 1
 0003                   .dbsym e data2 _data2 c
 0003           _data1::
 0003                   .blkb 1
 0004                   .dbsym e data1 _data1 c
